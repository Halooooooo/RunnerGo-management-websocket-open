// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RunnerGo-management/internal/pkg/dal/model"
)

func newInvoice(db *gorm.DB, opts ...gen.DOOption) invoice {
	_invoice := invoice{}

	_invoice.invoiceDo.UseDB(db, opts...)
	_invoice.invoiceDo.UseModel(&model.Invoice{})

	tableName := _invoice.invoiceDo.TableName()
	_invoice.ALL = field.NewAsterisk(tableName)
	_invoice.ID = field.NewInt64(tableName, "id")
	_invoice.OrderID = field.NewString(tableName, "order_id")
	_invoice.TeamID = field.NewString(tableName, "team_id")
	_invoice.UserID = field.NewString(tableName, "user_id")
	_invoice.InvoiceTitle = field.NewString(tableName, "invoice_title")
	_invoice.InvoiceType = field.NewInt32(tableName, "invoice_type")
	_invoice.TaxNum = field.NewString(tableName, "tax_num")
	_invoice.CompanyAddress = field.NewString(tableName, "company_address")
	_invoice.Phone = field.NewString(tableName, "phone")
	_invoice.OpenBankName = field.NewString(tableName, "open_bank_name")
	_invoice.BankAccountNum = field.NewString(tableName, "bank_account_num")
	_invoice.ReceiveEmail = field.NewString(tableName, "receive_email")
	_invoice.ReceiverName = field.NewString(tableName, "receiver_name")
	_invoice.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_invoice.ReceiverAddress = field.NewString(tableName, "receiver_address")
	_invoice.OpenInvoiceMode = field.NewInt32(tableName, "open_invoice_mode")
	_invoice.OpenInvoiceState = field.NewInt32(tableName, "open_invoice_state")
	_invoice.CreatedAt = field.NewTime(tableName, "created_at")
	_invoice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_invoice.DeletedAt = field.NewField(tableName, "deleted_at")

	_invoice.fillFieldMap()

	return _invoice
}

type invoice struct {
	invoiceDo invoiceDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键id
	OrderID          field.String // 订单id
	TeamID           field.String // 团队id
	UserID           field.String // 开发票人id
	InvoiceTitle     field.String // 发票抬头
	InvoiceType      field.Int32  // 发票类型：1-普通发票，2-专业发票
	TaxNum           field.String // 纳税识别号
	CompanyAddress   field.String // 公司地址（开票地址）
	Phone            field.String // 电话号码
	OpenBankName     field.String // 开户银行名称
	BankAccountNum   field.String // 开户行账号
	ReceiveEmail     field.String // 接受邮箱
	ReceiverName     field.String // 收件人姓名
	ReceiverPhone    field.String // 收件人电话
	ReceiverAddress  field.String // 收件人地址
	OpenInvoiceMode  field.Int32  // 开票方式：1-专票-电子票，2-专票-邮寄
	OpenInvoiceState field.Int32  // 发票申请状态：0-待开票，1-已开票，2-已作废
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 修改时间
	DeletedAt        field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (i invoice) Table(newTableName string) *invoice {
	i.invoiceDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoice) As(alias string) *invoice {
	i.invoiceDo.DO = *(i.invoiceDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoice) updateTableName(table string) *invoice {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.OrderID = field.NewString(table, "order_id")
	i.TeamID = field.NewString(table, "team_id")
	i.UserID = field.NewString(table, "user_id")
	i.InvoiceTitle = field.NewString(table, "invoice_title")
	i.InvoiceType = field.NewInt32(table, "invoice_type")
	i.TaxNum = field.NewString(table, "tax_num")
	i.CompanyAddress = field.NewString(table, "company_address")
	i.Phone = field.NewString(table, "phone")
	i.OpenBankName = field.NewString(table, "open_bank_name")
	i.BankAccountNum = field.NewString(table, "bank_account_num")
	i.ReceiveEmail = field.NewString(table, "receive_email")
	i.ReceiverName = field.NewString(table, "receiver_name")
	i.ReceiverPhone = field.NewString(table, "receiver_phone")
	i.ReceiverAddress = field.NewString(table, "receiver_address")
	i.OpenInvoiceMode = field.NewInt32(table, "open_invoice_mode")
	i.OpenInvoiceState = field.NewInt32(table, "open_invoice_state")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *invoice) WithContext(ctx context.Context) *invoiceDo { return i.invoiceDo.WithContext(ctx) }

func (i invoice) TableName() string { return i.invoiceDo.TableName() }

func (i invoice) Alias() string { return i.invoiceDo.Alias() }

func (i *invoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoice) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 20)
	i.fieldMap["id"] = i.ID
	i.fieldMap["order_id"] = i.OrderID
	i.fieldMap["team_id"] = i.TeamID
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["invoice_title"] = i.InvoiceTitle
	i.fieldMap["invoice_type"] = i.InvoiceType
	i.fieldMap["tax_num"] = i.TaxNum
	i.fieldMap["company_address"] = i.CompanyAddress
	i.fieldMap["phone"] = i.Phone
	i.fieldMap["open_bank_name"] = i.OpenBankName
	i.fieldMap["bank_account_num"] = i.BankAccountNum
	i.fieldMap["receive_email"] = i.ReceiveEmail
	i.fieldMap["receiver_name"] = i.ReceiverName
	i.fieldMap["receiver_phone"] = i.ReceiverPhone
	i.fieldMap["receiver_address"] = i.ReceiverAddress
	i.fieldMap["open_invoice_mode"] = i.OpenInvoiceMode
	i.fieldMap["open_invoice_state"] = i.OpenInvoiceState
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i invoice) clone(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoice) replaceDB(db *gorm.DB) invoice {
	i.invoiceDo.ReplaceDB(db)
	return i
}

type invoiceDo struct{ gen.DO }

func (i invoiceDo) Debug() *invoiceDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceDo) WithContext(ctx context.Context) *invoiceDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceDo) ReadDB() *invoiceDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceDo) WriteDB() *invoiceDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceDo) Session(config *gorm.Session) *invoiceDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceDo) Clauses(conds ...clause.Expression) *invoiceDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceDo) Returning(value interface{}, columns ...string) *invoiceDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceDo) Not(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceDo) Or(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceDo) Select(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceDo) Where(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *invoiceDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i invoiceDo) Order(conds ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceDo) Distinct(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceDo) Omit(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceDo) Join(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceDo) Group(cols ...field.Expr) *invoiceDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceDo) Having(conds ...gen.Condition) *invoiceDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceDo) Limit(limit int) *invoiceDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceDo) Offset(offset int) *invoiceDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *invoiceDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceDo) Unscoped() *invoiceDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceDo) Create(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceDo) CreateInBatches(values []*model.Invoice, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceDo) Save(values ...*model.Invoice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceDo) First() (*model.Invoice, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Take() (*model.Invoice, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Last() (*model.Invoice, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) Find() ([]*model.Invoice, error) {
	result, err := i.DO.Find()
	return result.([]*model.Invoice), err
}

func (i invoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Invoice, err error) {
	buf := make([]*model.Invoice, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceDo) FindInBatches(result *[]*model.Invoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceDo) Attrs(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceDo) Assign(attrs ...field.AssignExpr) *invoiceDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceDo) Joins(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceDo) Preload(fields ...field.RelationField) *invoiceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceDo) FirstOrInit() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FirstOrCreate() (*model.Invoice, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Invoice), nil
	}
}

func (i invoiceDo) FindByPage(offset int, limit int) (result []*model.Invoice, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceDo) Delete(models ...*model.Invoice) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceDo) withDO(do gen.Dao) *invoiceDo {
	i.DO = *do.(*gen.DO)
	return i
}
