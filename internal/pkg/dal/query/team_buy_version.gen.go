// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RunnerGo-management/internal/pkg/dal/model"
)

func newTeamBuyVersion(db *gorm.DB, opts ...gen.DOOption) teamBuyVersion {
	_teamBuyVersion := teamBuyVersion{}

	_teamBuyVersion.teamBuyVersionDo.UseDB(db, opts...)
	_teamBuyVersion.teamBuyVersionDo.UseModel(&model.TeamBuyVersion{})

	tableName := _teamBuyVersion.teamBuyVersionDo.TableName()
	_teamBuyVersion.ALL = field.NewAsterisk(tableName)
	_teamBuyVersion.ID = field.NewInt32(tableName, "id")
	_teamBuyVersion.Title = field.NewString(tableName, "title")
	_teamBuyVersion.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_teamBuyVersion.UnitPriceExplain = field.NewString(tableName, "unit_price_explain")
	_teamBuyVersion.Detail = field.NewString(tableName, "detail")
	_teamBuyVersion.MinUserNum = field.NewInt64(tableName, "min_user_num")
	_teamBuyVersion.MaxUserNum = field.NewInt64(tableName, "max_user_num")
	_teamBuyVersion.MaxConcurrence = field.NewInt64(tableName, "max_concurrence")
	_teamBuyVersion.MaxAPINum = field.NewInt64(tableName, "max_api_num")
	_teamBuyVersion.MaxRunTime = field.NewInt64(tableName, "max_run_time")
	_teamBuyVersion.GiveVunNum = field.NewInt64(tableName, "give_vun_num")
	_teamBuyVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_teamBuyVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_teamBuyVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_teamBuyVersion.fillFieldMap()

	return _teamBuyVersion
}

type teamBuyVersion struct {
	teamBuyVersionDo teamBuyVersionDo

	ALL              field.Asterisk
	ID               field.Int32   // 主键id
	Title            field.String  // 购买套餐名称
	UnitPrice        field.Float64 // 单人单月定价
	UnitPriceExplain field.String  // 单人单月定价说明
	Detail           field.String  // 套餐详情
	MinUserNum       field.Int64   // 最少团队成员数
	MaxUserNum       field.Int64   // 最大团队成员数
	MaxConcurrence   field.Int64   // 最大并发数
	MaxAPINum        field.Int64   // 最大接口数
	MaxRunTime       field.Int64   // 最大运行时长
	GiveVunNum       field.Int64   // 赠送VUM配额
	CreatedAt        field.Time    // 创建时间
	UpdatedAt        field.Time    // 修改时间
	DeletedAt        field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (t teamBuyVersion) Table(newTableName string) *teamBuyVersion {
	t.teamBuyVersionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamBuyVersion) As(alias string) *teamBuyVersion {
	t.teamBuyVersionDo.DO = *(t.teamBuyVersionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamBuyVersion) updateTableName(table string) *teamBuyVersion {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Title = field.NewString(table, "title")
	t.UnitPrice = field.NewFloat64(table, "unit_price")
	t.UnitPriceExplain = field.NewString(table, "unit_price_explain")
	t.Detail = field.NewString(table, "detail")
	t.MinUserNum = field.NewInt64(table, "min_user_num")
	t.MaxUserNum = field.NewInt64(table, "max_user_num")
	t.MaxConcurrence = field.NewInt64(table, "max_concurrence")
	t.MaxAPINum = field.NewInt64(table, "max_api_num")
	t.MaxRunTime = field.NewInt64(table, "max_run_time")
	t.GiveVunNum = field.NewInt64(table, "give_vun_num")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *teamBuyVersion) WithContext(ctx context.Context) *teamBuyVersionDo {
	return t.teamBuyVersionDo.WithContext(ctx)
}

func (t teamBuyVersion) TableName() string { return t.teamBuyVersionDo.TableName() }

func (t teamBuyVersion) Alias() string { return t.teamBuyVersionDo.Alias() }

func (t *teamBuyVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamBuyVersion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["title"] = t.Title
	t.fieldMap["unit_price"] = t.UnitPrice
	t.fieldMap["unit_price_explain"] = t.UnitPriceExplain
	t.fieldMap["detail"] = t.Detail
	t.fieldMap["min_user_num"] = t.MinUserNum
	t.fieldMap["max_user_num"] = t.MaxUserNum
	t.fieldMap["max_concurrence"] = t.MaxConcurrence
	t.fieldMap["max_api_num"] = t.MaxAPINum
	t.fieldMap["max_run_time"] = t.MaxRunTime
	t.fieldMap["give_vun_num"] = t.GiveVunNum
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t teamBuyVersion) clone(db *gorm.DB) teamBuyVersion {
	t.teamBuyVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamBuyVersion) replaceDB(db *gorm.DB) teamBuyVersion {
	t.teamBuyVersionDo.ReplaceDB(db)
	return t
}

type teamBuyVersionDo struct{ gen.DO }

func (t teamBuyVersionDo) Debug() *teamBuyVersionDo {
	return t.withDO(t.DO.Debug())
}

func (t teamBuyVersionDo) WithContext(ctx context.Context) *teamBuyVersionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamBuyVersionDo) ReadDB() *teamBuyVersionDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamBuyVersionDo) WriteDB() *teamBuyVersionDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamBuyVersionDo) Session(config *gorm.Session) *teamBuyVersionDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamBuyVersionDo) Clauses(conds ...clause.Expression) *teamBuyVersionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamBuyVersionDo) Returning(value interface{}, columns ...string) *teamBuyVersionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamBuyVersionDo) Not(conds ...gen.Condition) *teamBuyVersionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamBuyVersionDo) Or(conds ...gen.Condition) *teamBuyVersionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamBuyVersionDo) Select(conds ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamBuyVersionDo) Where(conds ...gen.Condition) *teamBuyVersionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamBuyVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *teamBuyVersionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t teamBuyVersionDo) Order(conds ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamBuyVersionDo) Distinct(cols ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamBuyVersionDo) Omit(cols ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamBuyVersionDo) Join(table schema.Tabler, on ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamBuyVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamBuyVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamBuyVersionDo) Group(cols ...field.Expr) *teamBuyVersionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamBuyVersionDo) Having(conds ...gen.Condition) *teamBuyVersionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamBuyVersionDo) Limit(limit int) *teamBuyVersionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamBuyVersionDo) Offset(offset int) *teamBuyVersionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamBuyVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *teamBuyVersionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamBuyVersionDo) Unscoped() *teamBuyVersionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamBuyVersionDo) Create(values ...*model.TeamBuyVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamBuyVersionDo) CreateInBatches(values []*model.TeamBuyVersion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamBuyVersionDo) Save(values ...*model.TeamBuyVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamBuyVersionDo) First() (*model.TeamBuyVersion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamBuyVersion), nil
	}
}

func (t teamBuyVersionDo) Take() (*model.TeamBuyVersion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamBuyVersion), nil
	}
}

func (t teamBuyVersionDo) Last() (*model.TeamBuyVersion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamBuyVersion), nil
	}
}

func (t teamBuyVersionDo) Find() ([]*model.TeamBuyVersion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamBuyVersion), err
}

func (t teamBuyVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamBuyVersion, err error) {
	buf := make([]*model.TeamBuyVersion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamBuyVersionDo) FindInBatches(result *[]*model.TeamBuyVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamBuyVersionDo) Attrs(attrs ...field.AssignExpr) *teamBuyVersionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamBuyVersionDo) Assign(attrs ...field.AssignExpr) *teamBuyVersionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamBuyVersionDo) Joins(fields ...field.RelationField) *teamBuyVersionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamBuyVersionDo) Preload(fields ...field.RelationField) *teamBuyVersionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamBuyVersionDo) FirstOrInit() (*model.TeamBuyVersion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamBuyVersion), nil
	}
}

func (t teamBuyVersionDo) FirstOrCreate() (*model.TeamBuyVersion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamBuyVersion), nil
	}
}

func (t teamBuyVersionDo) FindByPage(offset int, limit int) (result []*model.TeamBuyVersion, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamBuyVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamBuyVersionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamBuyVersionDo) Delete(models ...*model.TeamBuyVersion) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamBuyVersionDo) withDO(do gen.Dao) *teamBuyVersionDo {
	t.DO = *do.(*gen.DO)
	return t
}
