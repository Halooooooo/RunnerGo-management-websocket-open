// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RunnerGo-management/internal/pkg/dal/model"
)

func newVumUseLog(db *gorm.DB, opts ...gen.DOOption) vumUseLog {
	_vumUseLog := vumUseLog{}

	_vumUseLog.vumUseLogDo.UseDB(db, opts...)
	_vumUseLog.vumUseLogDo.UseModel(&model.VumUseLog{})

	tableName := _vumUseLog.vumUseLogDo.TableName()
	_vumUseLog.ALL = field.NewAsterisk(tableName)
	_vumUseLog.ID = field.NewInt64(tableName, "id")
	_vumUseLog.TeamID = field.NewString(tableName, "team_id")
	_vumUseLog.PlanID = field.NewString(tableName, "plan_id")
	_vumUseLog.PlanName = field.NewString(tableName, "plan_name")
	_vumUseLog.TaskType = field.NewInt32(tableName, "task_type")
	_vumUseLog.TaskMode = field.NewInt32(tableName, "task_mode")
	_vumUseLog.RunTime = field.NewTime(tableName, "run_time")
	_vumUseLog.RunUserID = field.NewString(tableName, "run_user_id")
	_vumUseLog.ConcurrenceNum = field.NewInt32(tableName, "concurrence_num")
	_vumUseLog.ConcurrenceMinute = field.NewInt32(tableName, "concurrence_minute")
	_vumUseLog.VumConsumeNum = field.NewInt64(tableName, "vum_consume_num")
	_vumUseLog.CreatedAt = field.NewTime(tableName, "created_at")
	_vumUseLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vumUseLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_vumUseLog.fillFieldMap()

	return _vumUseLog
}

type vumUseLog struct {
	vumUseLogDo vumUseLogDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键id
	TeamID            field.String // 团队id
	PlanID            field.String // 计划id
	PlanName          field.String // 计划名称
	TaskType          field.Int32  // 任务类型：1-普通任务，2-定时任务
	TaskMode          field.Int32  // 压测模式：1-并发模式，2-阶梯模式，3-错误率模式，4-响应时间模式，5-每秒请求数模式，6 -每秒事务数模式
	RunTime           field.Time   // 运行时间
	RunUserID         field.String // 执行者id
	ConcurrenceNum    field.Int32  // 并发数
	ConcurrenceMinute field.Int32  // 并发时长（单位分钟）
	VumConsumeNum     field.Int64  // VUM使用量
	CreatedAt         field.Time   // 创建时间
	UpdatedAt         field.Time   // 修改时间
	DeletedAt         field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (v vumUseLog) Table(newTableName string) *vumUseLog {
	v.vumUseLogDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vumUseLog) As(alias string) *vumUseLog {
	v.vumUseLogDo.DO = *(v.vumUseLogDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vumUseLog) updateTableName(table string) *vumUseLog {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.TeamID = field.NewString(table, "team_id")
	v.PlanID = field.NewString(table, "plan_id")
	v.PlanName = field.NewString(table, "plan_name")
	v.TaskType = field.NewInt32(table, "task_type")
	v.TaskMode = field.NewInt32(table, "task_mode")
	v.RunTime = field.NewTime(table, "run_time")
	v.RunUserID = field.NewString(table, "run_user_id")
	v.ConcurrenceNum = field.NewInt32(table, "concurrence_num")
	v.ConcurrenceMinute = field.NewInt32(table, "concurrence_minute")
	v.VumConsumeNum = field.NewInt64(table, "vum_consume_num")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *vumUseLog) WithContext(ctx context.Context) *vumUseLogDo {
	return v.vumUseLogDo.WithContext(ctx)
}

func (v vumUseLog) TableName() string { return v.vumUseLogDo.TableName() }

func (v vumUseLog) Alias() string { return v.vumUseLogDo.Alias() }

func (v *vumUseLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vumUseLog) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 14)
	v.fieldMap["id"] = v.ID
	v.fieldMap["team_id"] = v.TeamID
	v.fieldMap["plan_id"] = v.PlanID
	v.fieldMap["plan_name"] = v.PlanName
	v.fieldMap["task_type"] = v.TaskType
	v.fieldMap["task_mode"] = v.TaskMode
	v.fieldMap["run_time"] = v.RunTime
	v.fieldMap["run_user_id"] = v.RunUserID
	v.fieldMap["concurrence_num"] = v.ConcurrenceNum
	v.fieldMap["concurrence_minute"] = v.ConcurrenceMinute
	v.fieldMap["vum_consume_num"] = v.VumConsumeNum
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v vumUseLog) clone(db *gorm.DB) vumUseLog {
	v.vumUseLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vumUseLog) replaceDB(db *gorm.DB) vumUseLog {
	v.vumUseLogDo.ReplaceDB(db)
	return v
}

type vumUseLogDo struct{ gen.DO }

func (v vumUseLogDo) Debug() *vumUseLogDo {
	return v.withDO(v.DO.Debug())
}

func (v vumUseLogDo) WithContext(ctx context.Context) *vumUseLogDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vumUseLogDo) ReadDB() *vumUseLogDo {
	return v.Clauses(dbresolver.Read)
}

func (v vumUseLogDo) WriteDB() *vumUseLogDo {
	return v.Clauses(dbresolver.Write)
}

func (v vumUseLogDo) Session(config *gorm.Session) *vumUseLogDo {
	return v.withDO(v.DO.Session(config))
}

func (v vumUseLogDo) Clauses(conds ...clause.Expression) *vumUseLogDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vumUseLogDo) Returning(value interface{}, columns ...string) *vumUseLogDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vumUseLogDo) Not(conds ...gen.Condition) *vumUseLogDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vumUseLogDo) Or(conds ...gen.Condition) *vumUseLogDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vumUseLogDo) Select(conds ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vumUseLogDo) Where(conds ...gen.Condition) *vumUseLogDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vumUseLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *vumUseLogDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vumUseLogDo) Order(conds ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vumUseLogDo) Distinct(cols ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vumUseLogDo) Omit(cols ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vumUseLogDo) Join(table schema.Tabler, on ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vumUseLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vumUseLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vumUseLogDo) Group(cols ...field.Expr) *vumUseLogDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vumUseLogDo) Having(conds ...gen.Condition) *vumUseLogDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vumUseLogDo) Limit(limit int) *vumUseLogDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vumUseLogDo) Offset(offset int) *vumUseLogDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vumUseLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vumUseLogDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vumUseLogDo) Unscoped() *vumUseLogDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vumUseLogDo) Create(values ...*model.VumUseLog) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vumUseLogDo) CreateInBatches(values []*model.VumUseLog, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vumUseLogDo) Save(values ...*model.VumUseLog) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vumUseLogDo) First() (*model.VumUseLog, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumUseLog), nil
	}
}

func (v vumUseLogDo) Take() (*model.VumUseLog, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumUseLog), nil
	}
}

func (v vumUseLogDo) Last() (*model.VumUseLog, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumUseLog), nil
	}
}

func (v vumUseLogDo) Find() ([]*model.VumUseLog, error) {
	result, err := v.DO.Find()
	return result.([]*model.VumUseLog), err
}

func (v vumUseLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VumUseLog, err error) {
	buf := make([]*model.VumUseLog, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vumUseLogDo) FindInBatches(result *[]*model.VumUseLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vumUseLogDo) Attrs(attrs ...field.AssignExpr) *vumUseLogDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vumUseLogDo) Assign(attrs ...field.AssignExpr) *vumUseLogDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vumUseLogDo) Joins(fields ...field.RelationField) *vumUseLogDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vumUseLogDo) Preload(fields ...field.RelationField) *vumUseLogDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vumUseLogDo) FirstOrInit() (*model.VumUseLog, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumUseLog), nil
	}
}

func (v vumUseLogDo) FirstOrCreate() (*model.VumUseLog, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumUseLog), nil
	}
}

func (v vumUseLogDo) FindByPage(offset int, limit int) (result []*model.VumUseLog, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vumUseLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vumUseLogDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vumUseLogDo) Delete(models ...*model.VumUseLog) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vumUseLogDo) withDO(do gen.Dao) *vumUseLogDo {
	v.DO = *do.(*gen.DO)
	return v
}
