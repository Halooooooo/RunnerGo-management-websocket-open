// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RunnerGo-management/internal/pkg/dal/model"
)

func newVumBuyVersion(db *gorm.DB, opts ...gen.DOOption) vumBuyVersion {
	_vumBuyVersion := vumBuyVersion{}

	_vumBuyVersion.vumBuyVersionDo.UseDB(db, opts...)
	_vumBuyVersion.vumBuyVersionDo.UseModel(&model.VumBuyVersion{})

	tableName := _vumBuyVersion.vumBuyVersionDo.TableName()
	_vumBuyVersion.ALL = field.NewAsterisk(tableName)
	_vumBuyVersion.ID = field.NewInt32(tableName, "id")
	_vumBuyVersion.VumBuyVersionType = field.NewInt32(tableName, "vum_buy_version_type")
	_vumBuyVersion.Title = field.NewString(tableName, "title")
	_vumBuyVersion.VumCount = field.NewInt64(tableName, "vum_count")
	_vumBuyVersion.MaxConcurrent = field.NewInt64(tableName, "max_concurrent")
	_vumBuyVersion.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_vumBuyVersion.Discounts = field.NewFloat64(tableName, "discounts")
	_vumBuyVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_vumBuyVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vumBuyVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_vumBuyVersion.fillFieldMap()

	return _vumBuyVersion
}

type vumBuyVersion struct {
	vumBuyVersionDo vumBuyVersionDo

	ALL               field.Asterisk
	ID                field.Int32   // 主键id
	VumBuyVersionType field.Int32   // vum套餐类型：1-套餐资源A，2-套餐资源B，3-套餐资源C，4-套餐资源D
	Title             field.String  // 购买套餐名称
	VumCount          field.Int64   // VUM额度
	MaxConcurrent     field.Int64   // 最大并发数
	UnitPrice         field.Float64 // 单价
	Discounts         field.Float64 // 优惠价格
	CreatedAt         field.Time    // 创建时间
	UpdatedAt         field.Time    // 修改时间
	DeletedAt         field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (v vumBuyVersion) Table(newTableName string) *vumBuyVersion {
	v.vumBuyVersionDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vumBuyVersion) As(alias string) *vumBuyVersion {
	v.vumBuyVersionDo.DO = *(v.vumBuyVersionDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vumBuyVersion) updateTableName(table string) *vumBuyVersion {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.VumBuyVersionType = field.NewInt32(table, "vum_buy_version_type")
	v.Title = field.NewString(table, "title")
	v.VumCount = field.NewInt64(table, "vum_count")
	v.MaxConcurrent = field.NewInt64(table, "max_concurrent")
	v.UnitPrice = field.NewFloat64(table, "unit_price")
	v.Discounts = field.NewFloat64(table, "discounts")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *vumBuyVersion) WithContext(ctx context.Context) *vumBuyVersionDo {
	return v.vumBuyVersionDo.WithContext(ctx)
}

func (v vumBuyVersion) TableName() string { return v.vumBuyVersionDo.TableName() }

func (v vumBuyVersion) Alias() string { return v.vumBuyVersionDo.Alias() }

func (v *vumBuyVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vumBuyVersion) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 10)
	v.fieldMap["id"] = v.ID
	v.fieldMap["vum_buy_version_type"] = v.VumBuyVersionType
	v.fieldMap["title"] = v.Title
	v.fieldMap["vum_count"] = v.VumCount
	v.fieldMap["max_concurrent"] = v.MaxConcurrent
	v.fieldMap["unit_price"] = v.UnitPrice
	v.fieldMap["discounts"] = v.Discounts
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v vumBuyVersion) clone(db *gorm.DB) vumBuyVersion {
	v.vumBuyVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vumBuyVersion) replaceDB(db *gorm.DB) vumBuyVersion {
	v.vumBuyVersionDo.ReplaceDB(db)
	return v
}

type vumBuyVersionDo struct{ gen.DO }

func (v vumBuyVersionDo) Debug() *vumBuyVersionDo {
	return v.withDO(v.DO.Debug())
}

func (v vumBuyVersionDo) WithContext(ctx context.Context) *vumBuyVersionDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vumBuyVersionDo) ReadDB() *vumBuyVersionDo {
	return v.Clauses(dbresolver.Read)
}

func (v vumBuyVersionDo) WriteDB() *vumBuyVersionDo {
	return v.Clauses(dbresolver.Write)
}

func (v vumBuyVersionDo) Session(config *gorm.Session) *vumBuyVersionDo {
	return v.withDO(v.DO.Session(config))
}

func (v vumBuyVersionDo) Clauses(conds ...clause.Expression) *vumBuyVersionDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vumBuyVersionDo) Returning(value interface{}, columns ...string) *vumBuyVersionDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vumBuyVersionDo) Not(conds ...gen.Condition) *vumBuyVersionDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vumBuyVersionDo) Or(conds ...gen.Condition) *vumBuyVersionDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vumBuyVersionDo) Select(conds ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vumBuyVersionDo) Where(conds ...gen.Condition) *vumBuyVersionDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vumBuyVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *vumBuyVersionDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vumBuyVersionDo) Order(conds ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vumBuyVersionDo) Distinct(cols ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vumBuyVersionDo) Omit(cols ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vumBuyVersionDo) Join(table schema.Tabler, on ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vumBuyVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vumBuyVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vumBuyVersionDo) Group(cols ...field.Expr) *vumBuyVersionDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vumBuyVersionDo) Having(conds ...gen.Condition) *vumBuyVersionDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vumBuyVersionDo) Limit(limit int) *vumBuyVersionDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vumBuyVersionDo) Offset(offset int) *vumBuyVersionDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vumBuyVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vumBuyVersionDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vumBuyVersionDo) Unscoped() *vumBuyVersionDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vumBuyVersionDo) Create(values ...*model.VumBuyVersion) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vumBuyVersionDo) CreateInBatches(values []*model.VumBuyVersion, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vumBuyVersionDo) Save(values ...*model.VumBuyVersion) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vumBuyVersionDo) First() (*model.VumBuyVersion, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumBuyVersion), nil
	}
}

func (v vumBuyVersionDo) Take() (*model.VumBuyVersion, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumBuyVersion), nil
	}
}

func (v vumBuyVersionDo) Last() (*model.VumBuyVersion, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumBuyVersion), nil
	}
}

func (v vumBuyVersionDo) Find() ([]*model.VumBuyVersion, error) {
	result, err := v.DO.Find()
	return result.([]*model.VumBuyVersion), err
}

func (v vumBuyVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VumBuyVersion, err error) {
	buf := make([]*model.VumBuyVersion, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vumBuyVersionDo) FindInBatches(result *[]*model.VumBuyVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vumBuyVersionDo) Attrs(attrs ...field.AssignExpr) *vumBuyVersionDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vumBuyVersionDo) Assign(attrs ...field.AssignExpr) *vumBuyVersionDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vumBuyVersionDo) Joins(fields ...field.RelationField) *vumBuyVersionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vumBuyVersionDo) Preload(fields ...field.RelationField) *vumBuyVersionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vumBuyVersionDo) FirstOrInit() (*model.VumBuyVersion, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumBuyVersion), nil
	}
}

func (v vumBuyVersionDo) FirstOrCreate() (*model.VumBuyVersion, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VumBuyVersion), nil
	}
}

func (v vumBuyVersionDo) FindByPage(offset int, limit int) (result []*model.VumBuyVersion, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vumBuyVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vumBuyVersionDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vumBuyVersionDo) Delete(models ...*model.VumBuyVersion) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vumBuyVersionDo) withDO(do gen.Dao) *vumBuyVersionDo {
	v.DO = *do.(*gen.DO)
	return v
}
